{
	"info": {
		"_postman_id": "8f6a5322-b2ed-4c61-9f19-eaedcbb1dd71",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1) /login логинимся и берем токен",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) необходимо залогиниться\r",
							"// POST\r",
							"// http://162.55.220.72:5005/login\r",
							"// login : str (кроме /)\r",
							"// password : str\r",
							"// Приходящий токен необходимо передать во все остальные запросы.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// устанавливаем динамическую переменную token в environment\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"\r",
							"const ip = 'http://162.55.220.72:5005';\r",
							"pm.environment.set(\"url\", ip);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Vadim",
							"type": "text"
						},
						{
							"key": "password",
							"value": "password",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2) /user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2) http://162.55.220.72:5005/user_info\r",
							"// req. (RAW JSON)\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// resp.\r",
							"// {'start_qa_salary':salary,\r",
							"//  'qa_salary_after_6_months': salary * 2,\r",
							"//  'qa_salary_after_12_months': salary * 2.9,\r",
							"//  'person': {'u_name':[user_name, salary, age],\r",
							"//                                 'u_age':age,\r",
							"//                                 'u_salary_1.5_year': salary * 4}\r",
							"//                                 }\r",
							"\r",
							"// Тесты:\r",
							"// + 1) Статус код 200 \r",
							"// + 2) Проверка структуры json в ответе.\r",
							"// + 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// + 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"// проверяем статус код=200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверяем структуру json - вариант 1\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628706832.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"person\",\r",
							"\t\t\"qa_salary_after_12_months\",\r",
							"\t\t\"qa_salary_after_6_months\",\r",
							"\t\t\"start_qa_salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"person\": {\r",
							"\t\t\t\"$id\": \"#root/person\", \r",
							"\t\t\t\"title\": \"Person\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"u_age\",\r",
							"\t\t\t\t\"u_name\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"u_age\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_age\", \r",
							"\t\t\t\t\t\"title\": \"U_age\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t30\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_name\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_name\", \r",
							"\t\t\t\t\t\"title\": \"U_name\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t4000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"qa_salary_after_12_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_12_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_12_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2900\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"qa_salary_after_6_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_6_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_6_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"start_qa_salary\": {\r",
							"\t\t\t\"$id\": \"#root/start_qa_salary\", \r",
							"\t\t\t\"title\": \"Start_qa_salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t1000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"pm.test('Schema is valid - variant 1', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверяем структуру json - вариант 2\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628706832.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"person\",\r",
							"\t\t\"qa_salary_after_12_months\",\r",
							"\t\t\"qa_salary_after_6_months\",\r",
							"\t\t\"start_qa_salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"person\": {\r",
							"\t\t\t\"$id\": \"#root/person\", \r",
							"\t\t\t\"title\": \"Person\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"u_age\",\r",
							"\t\t\t\t\"u_name\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"u_age\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_age\", \r",
							"\t\t\t\t\t\"title\": \"U_age\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t30\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_name\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_name\", \r",
							"\t\t\t\t\t\"title\": \"U_name\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t4000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"qa_salary_after_12_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_12_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_12_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2900\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"qa_salary_after_6_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_6_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_6_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"start_qa_salary\": {\r",
							"\t\t\t\"$id\": \"#root/start_qa_salary\", \r",
							"\t\t\t\"title\": \"Start_qa_salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t1000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid - variant 2', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"// достаем значение salary из ответа и присваиваем переменной\r",
							"var jsonData = pm.response.json();\r",
							"var salary = JSON.parse(request.data).salary;\r",
							"\r",
							"pm.test(\"6 месяцев = x2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"12 месяцев = x2.9\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"1.5 года = x4\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary*4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"u_salary_1.5_year\", pm.response.json().person.u_salary_1_5_year);\r",
							"\r",
							"// ломаем тесты\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(300);\r",
							"});\r",
							"\r",
							"// поменял одно из значений в схеме с integer на string\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628706832.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"person\",\r",
							"\t\t\"qa_salary_after_12_months\",\r",
							"\t\t\"qa_salary_after_6_months\",\r",
							"\t\t\"start_qa_salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"person\": {\r",
							"\t\t\t\"$id\": \"#root/person\", \r",
							"\t\t\t\"title\": \"Person\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"u_age\",\r",
							"\t\t\t\t\"u_name\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"u_age\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_age\", \r",
							"\t\t\t\t\t\"title\": \"U_age\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t30\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_name\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_name\", \r",
							"\t\t\t\t\t\"title\": \"U_name\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t4000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"qa_salary_after_12_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_12_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_12_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2900\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"qa_salary_after_6_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_6_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_6_months\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"start_qa_salary\": {\r",
							"\t\t\t\"$id\": \"#root/start_qa_salary\", \r",
							"\t\t\t\"title\": \"Start_qa_salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t1000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"pm.test('FAIL - значит тест работает. Schema is valid - variant 1', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// поменял одно из значений в схеме с integer на string\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628706832.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"person\",\r",
							"\t\t\"qa_salary_after_12_months\",\r",
							"\t\t\"qa_salary_after_6_months\",\r",
							"\t\t\"start_qa_salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"person\": {\r",
							"\t\t\t\"$id\": \"#root/person\", \r",
							"\t\t\t\"title\": \"Person\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"u_age\",\r",
							"\t\t\t\t\"u_name\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"u_age\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_age\", \r",
							"\t\t\t\t\t\"title\": \"U_age\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t30\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_name\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_name\", \r",
							"\t\t\t\t\t\"title\": \"U_name\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t4000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"qa_salary_after_12_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_12_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_12_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2900\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"qa_salary_after_6_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_6_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_6_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"start_qa_salary\": {\r",
							"\t\t\t\"$id\": \"#root/start_qa_salary\", \r",
							"\t\t\t\"title\": \"Start_qa_salary\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t1000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test('FAIL - значит тест работает. Schema is valid - variant 2', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    \r",
							"});\r",
							"\r",
							"\r",
							"// Меняем коэффициенты\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var salary = JSON.parse(request.data).salary;\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. 6 месяцев = x2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary*10);\r",
							"});\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. 12 месяцев = x2.9\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary*10);\r",
							"});\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. 1.5 года = x4\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary*10);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 30,\r\n    \"salary\": 1000,\r\n    \"name\": \"Vadim\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3) /new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3) http://162.55.220.72:5005/new_data\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"// Тесты:\r",
							"// + 1) Статус код 200\r",
							"// + 2) Проверка структуры json в ответе.\r",
							"// + 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// + 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"// проверяем статус код=200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверяем структуру json - вариант 1\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628712729.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t30\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Vadim\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"array\",\r",
							"\t\t\t\"default\": []\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid - variant 1', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверяем структуру json - вариант 2\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628712729.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t30\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Vadim\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"array\",\r",
							"\t\t\t\"default\": []\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid - variant 2', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var salary = request.data.salary;\r",
							"\r",
							"pm.test(\"salary = x2 через .to.be.true\", function () {\r",
							"    pm.expect(jsonData.salary[1] == salary*2).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"salary = x3 через .to.be.ok\", function () {\r",
							"    pm.expect(jsonData.salary[2] == salary*3).to.be.ok;\r",
							"});\r",
							"\r",
							"\r",
							"// проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"salary[2] > [0]\", function () {\r",
							"    pm.expect(jsonData.salary[2] > jsonData.salary[0]).to.be.true;\r",
							"});\r",
							"pm.test(\"salary[2] > [1]\", function () {\r",
							"    pm.expect(jsonData.salary[2] > jsonData.salary[1]).to.be.ok;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// ЛОМАЕМ ТЕСТЫ\r",
							"\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(100);\r",
							"});\r",
							"\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628712729.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t30\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Vadim\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": []\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"pm.test('FAIL - значит тест работает. Schema is valid - variant 1', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628712729.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t30\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Vadim\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": []\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test('FAIL - значит тест работает. Schema is valid - variant 2', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var salary = request.data.salary;\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. salary = x2 через .to.be.true\", function () {\r",
							"    pm.expect(jsonData.salary[1] == salary*10).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. salary = x3 через .to.be.ok\", function () {\r",
							"    pm.expect(jsonData.salary[2] == salary*10).to.be.ok;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. salary[2] > [0]\", function () {\r",
							"    pm.expect(jsonData.salary[2] < jsonData.salary[0]).to.be.true;\r",
							"});\r",
							"pm.test(\"FAIL - значит тест работает. salary[2] > [1]\", function () {\r",
							"    pm.expect(jsonData.salary[2] < jsonData.salary[1]).to.be.ok;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vadim",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4) /test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 4) http://162.55.220.72:5005/test_pet_info\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// weight: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age': age,\r",
							"//  'daily_food':weight * 0.012,\r",
							"//  'daily_sleep': weight * 2.5}\r",
							"\r",
							"// Тесты:\r",
							"// + 1) Статус код 200\r",
							"// + 2) Проверка структуры json в ответе.\r",
							"// + 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"// проверяем статус код=200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверяем структуру json - вариант 1\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628716285.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"daily_food\",\r",
							"\t\t\"daily_sleep\",\r",
							"\t\t\"name\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t10\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"daily_food\": {\r",
							"\t\t\t\"$id\": \"#root/daily_food\", \r",
							"\t\t\t\"title\": \"Daily_food\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t0.06\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"daily_sleep\": {\r",
							"\t\t\t\"$id\": \"#root/daily_sleep\", \r",
							"\t\t\t\"title\": \"Daily_sleep\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t12.5\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"VadimCat\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid - variant 1', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверяем структуру json - вариант 2\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628716285.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"daily_food\",\r",
							"\t\t\"daily_sleep\",\r",
							"\t\t\"name\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t10\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"daily_food\": {\r",
							"\t\t\t\"$id\": \"#root/daily_food\", \r",
							"\t\t\t\"title\": \"Daily_food\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t0.06\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"daily_sleep\": {\r",
							"\t\t\t\"$id\": \"#root/daily_sleep\", \r",
							"\t\t\t\"title\": \"Daily_sleep\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t12.5\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"VadimCat\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid - variant 2', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"// В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"// вариант 1 - берём weight из: var X = request.data.weight;\r",
							"// вариант 2 - console.log(pm.request.body.formdata.reference.weight.value); ищем значение weight через консоль с помощью Object.keys!!!\r",
							"\r",
							"var weight = pm.request.body.formdata.reference.weight.value;\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"daily_food = weight x 0.012 через .to.be.true\", function () {\r",
							"    pm.expect(jsonData.daily_food == weight*0.012).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"daily_sleep = weight x 2.5 через .to.be.ok\", function () {\r",
							"    pm.expect(jsonData.daily_sleep == weight*2.5).to.be.ok;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// ЛОМАЕМ ТЕСТЫ\r",
							"\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(100);\r",
							"});\r",
							"\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628716285.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"daily_food\",\r",
							"\t\t\"daily_sleep\",\r",
							"\t\t\"name\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t10\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"daily_food\": {\r",
							"\t\t\t\"$id\": \"#root/daily_food\", \r",
							"\t\t\t\"title\": \"Daily_food\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t0.06\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"daily_sleep\": {\r",
							"\t\t\t\"$id\": \"#root/daily_sleep\", \r",
							"\t\t\t\"title\": \"Daily_sleep\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t12.5\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"VadimCat\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"pm.test('FAIL - значит тест работает. Schema is valid - variant 1', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628716285.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"daily_food\",\r",
							"\t\t\"daily_sleep\",\r",
							"\t\t\"name\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t10\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"daily_food\": {\r",
							"\t\t\t\"$id\": \"#root/daily_food\", \r",
							"\t\t\t\"title\": \"Daily_food\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t0.06\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"daily_sleep\": {\r",
							"\t\t\t\"$id\": \"#root/daily_sleep\", \r",
							"\t\t\t\"title\": \"Daily_sleep\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t12.5\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"VadimCat\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test('FAIL - значит тест работает. Schema is valid - variant 2', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"var weight = pm.request.body.formdata.reference.weight.value;\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. daily_food = weight x 0.012 через .to.be.true\", function () {\r",
							"    pm.expect(jsonData.daily_food == weight*0.013).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. daily_sleep = weight x 2.5 через .to.be.ok\", function () {\r",
							"    pm.expect(jsonData.daily_sleep == weight*2.6).to.be.ok;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "10",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "5",
							"type": "text"
						},
						{
							"key": "name",
							"value": "VadimCat",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5) /get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5) http://162.55.220.72:5005/get_test_user\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age':age,\r",
							"//  'salary': salary,\r",
							"//  'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							"//  'u_salary_1.5_year': salary * 4}\r",
							"//   }\r",
							"\r",
							"// Тесты:\r",
							"// + 1) Статус код 200\r",
							"// + 2) Проверка структуры json в ответе.\r",
							"// + 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"// + 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"\r",
							"// проверяем статус код=200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверяем структуру json - вариант 1\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628742992.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"family\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"30\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"family\": {\r",
							"\t\t\t\"$id\": \"#root/family\", \r",
							"\t\t\t\"title\": \"Family\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"children\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"children\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/children\", \r",
							"\t\t\t\t\t\"title\": \"Children\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": [],\r",
							"\t\t\t\t\t\"items\":{\r",
							"\t\t\t\t\t\t\"$id\": \"#root/family/children/items\", \r",
							"\t\t\t\t\t\t\"title\": \"Items\", \r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t\t}\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t16000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Vadim\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t4000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid - variant 1', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверяем структуру json - вариант 2\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628742992.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"family\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"30\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"family\": {\r",
							"\t\t\t\"$id\": \"#root/family\", \r",
							"\t\t\t\"title\": \"Family\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"children\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"children\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/children\", \r",
							"\t\t\t\t\t\"title\": \"Children\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": [],\r",
							"\t\t\t\t\t\"items\":{\r",
							"\t\t\t\t\t\t\"$id\": \"#root/family/children/items\", \r",
							"\t\t\t\t\t\t\"title\": \"Items\", \r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t\t}\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t16000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Vadim\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t4000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid - variant 2', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить что значение поля name = значению переменной name из окружения\r",
							"\r",
							"pm.environment.set(\"name\", pm.response.json().name);\r",
							"\r",
							"pm.test(\"value name = environment {{name}}\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"// вариант 1 - берём weight из: var X = request.data.age;\r",
							"// вариант 2 - console.log(pm.request.body.formdata.reference.age.value); ищем значение age через консоль с помощью Object.keys!!!\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var age = pm.request.body.formdata.reference.age.value;\r",
							"\r",
							"pm.test(\"response.age = request.age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(age);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// ЛОМАЕМ ТЕСТЫ\r",
							"\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(100);\r",
							"});\r",
							"\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628742992.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"family\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"30\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"family\": {\r",
							"\t\t\t\"$id\": \"#root/family\", \r",
							"\t\t\t\"title\": \"Family\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"children\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"children\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/children\", \r",
							"\t\t\t\t\t\"title\": \"Children\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": [],\r",
							"\t\t\t\t\t\"items\":{\r",
							"\t\t\t\t\t\t\"$id\": \"#root/family/children/items\", \r",
							"\t\t\t\t\t\t\"title\": \"Items\", \r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t\t}\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t16000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Vadim\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t4000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"pm.test('FAIL - значит тест работает. Schema is valid - variant 1', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628742992.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"family\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"30\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"family\": {\r",
							"\t\t\t\"$id\": \"#root/family\", \r",
							"\t\t\t\"title\": \"Family\", \r",
							"\t\t\t\"type\": \"array\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"children\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"children\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/children\", \r",
							"\t\t\t\t\t\"title\": \"Children\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": [],\r",
							"\t\t\t\t\t\"items\":{\r",
							"\t\t\t\t\t\t\"$id\": \"#root/family/children/items\", \r",
							"\t\t\t\t\t\t\"title\": \"Items\", \r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t\t}\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t16000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Vadim\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t4000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test('FAIL - значит тест работает. Schema is valid - variant 2', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"value name = environment {{name}}\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Vad\");\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"response.age = request.age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"31\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// console.log(Object.keys(pm.request.body.formdata.reference.age.key));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1.5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vadim",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6) /currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 6) http://162.55.220.72:5005/currency\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"\r",
							"// Resp. Передаётся список массив объектов.\r",
							"// [\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// …\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// ]\r",
							"\r",
							"// Тесты:\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"var currency = pm.response.json();\r",
							"var randomCurrency = Math.floor(Math.random()*currency.length);\r",
							"\r",
							"// console.log(currency);\r",
							"// console.log(randomCurrency);\r",
							"// console.log(currency[randomCurrency].Cur_ID);\r",
							"\r",
							"pm.environment.set('Cur_ID', currency[randomCurrency].Cur_ID);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "dsf",
							"value": "{{$randomInt}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7) /curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 7) http://162.55.220.72:5005/curr_byn\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"// curr_code: int\r",
							"\r",
							"// Resp.\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"\r",
							"// Тесты:\r",
							"// + 1) Статус код 200\r",
							"// + 2) Проверка структуры json в ответе.\r",
							"\r",
							"// проверяем status code = 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверяем структуру json - вариант 1\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628794738.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"Cur_Abbreviation\",\r",
							"\t\t\"Cur_ID\",\r",
							"\t\t\"Cur_Name\",\r",
							"\t\t\"Cur_OfficialRate\",\r",
							"\t\t\"Cur_Scale\",\r",
							"\t\t\"Date\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"Cur_Abbreviation\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Abbreviation\", \r",
							"\t\t\t\"title\": \"Cur_abbreviation\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"PEN\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_ID\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_ID\", \r",
							"\t\t\t\"title\": \"Cur_id\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t488\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Cur_Name\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Name\", \r",
							"\t\t\t\"title\": \"Cur_name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Солей\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_OfficialRate\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_OfficialRate\", \r",
							"\t\t\t\"title\": \"Cur_officialrate\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t6.3692\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"Cur_Scale\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Scale\", \r",
							"\t\t\t\"title\": \"Cur_scale\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t10\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Date\": {\r",
							"\t\t\t\"$id\": \"#root/Date\", \r",
							"\t\t\t\"title\": \"Date\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"2021-08-12T00:00:00\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"pm.test('Schema is valid - variant 1', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверяем структуру json - вариант 2\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628794738.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"Cur_Abbreviation\",\r",
							"\t\t\"Cur_ID\",\r",
							"\t\t\"Cur_Name\",\r",
							"\t\t\"Cur_OfficialRate\",\r",
							"\t\t\"Cur_Scale\",\r",
							"\t\t\"Date\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"Cur_Abbreviation\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Abbreviation\", \r",
							"\t\t\t\"title\": \"Cur_abbreviation\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"PEN\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_ID\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_ID\", \r",
							"\t\t\t\"title\": \"Cur_id\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t488\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Cur_Name\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Name\", \r",
							"\t\t\t\"title\": \"Cur_name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Солей\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_OfficialRate\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_OfficialRate\", \r",
							"\t\t\t\"title\": \"Cur_officialrate\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t6.3692\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"Cur_Scale\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Scale\", \r",
							"\t\t\t\"title\": \"Cur_scale\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t10\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Date\": {\r",
							"\t\t\t\"$id\": \"#root/Date\", \r",
							"\t\t\t\"title\": \"Date\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"2021-08-12T00:00:00\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid - variant 2', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// ломаем тесты\r",
							"\r",
							"pm.test(\"FAIL - значит тест работает. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(300);\r",
							"});\r",
							"\r",
							"// поменял одно из значений в схеме с integer на string\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628794738.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"Cur_Abbreviation\",\r",
							"\t\t\"Cur_ID\",\r",
							"\t\t\"Cur_Name\",\r",
							"\t\t\"Cur_OfficialRate\",\r",
							"\t\t\"Cur_Scale\",\r",
							"\t\t\"Date\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"Cur_Abbreviation\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Abbreviation\", \r",
							"\t\t\t\"title\": \"Cur_abbreviation\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"PEN\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_ID\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_ID\", \r",
							"\t\t\t\"title\": \"Cur_id\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t488\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Cur_Name\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Name\", \r",
							"\t\t\t\"title\": \"Cur_name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Солей\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_OfficialRate\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_OfficialRate\", \r",
							"\t\t\t\"title\": \"Cur_officialrate\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t6.3692\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"Cur_Scale\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Scale\", \r",
							"\t\t\t\"title\": \"Cur_scale\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t10\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Date\": {\r",
							"\t\t\t\"$id\": \"#root/Date\", \r",
							"\t\t\t\"title\": \"Date\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"2021-08-12T00:00:00\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"pm.test('FAIL - значит тест работает. Schema is valid - variant 1', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// поменял одно из значений в схеме с integer на string\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1628794738.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"Cur_Abbreviation\",\r",
							"\t\t\"Cur_ID\",\r",
							"\t\t\"Cur_Name\",\r",
							"\t\t\"Cur_OfficialRate\",\r",
							"\t\t\"Cur_Scale\",\r",
							"\t\t\"Date\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"Cur_Abbreviation\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Abbreviation\", \r",
							"\t\t\t\"title\": \"Cur_abbreviation\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"PEN\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_ID\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_ID\", \r",
							"\t\t\t\"title\": \"Cur_id\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t488\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Cur_Name\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Name\", \r",
							"\t\t\t\"title\": \"Cur_name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Солей\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_OfficialRate\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_OfficialRate\", \r",
							"\t\t\t\"title\": \"Cur_officialrate\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t6.3692\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"Cur_Scale\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Scale\", \r",
							"\t\t\t\"title\": \"Cur_scale\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t10\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Date\": {\r",
							"\t\t\t\"$id\": \"#root/Date\", \r",
							"\t\t\t\"title\": \"Date\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"2021-08-12T00:00:00\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"var data1 = pm.response.json();\r",
							"\r",
							"pm.test('FAIL - значит тест работает. Schema is valid - variant 2', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    \r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "*** pm.sendRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ***\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итерации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про валюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации\r",
							"\r",
							"// сделали итерацию по перебору всех объектов в массиве\r",
							"\r",
							"for (var i=0; i<pm.response.json().length; i++){\r",
							"    const postRequest = {\r",
							"  url: 'http://162.55.220.72:5005/curr_byn',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"        'Content-Type': 'multipart/form-data; boundary=<calculated when request is sent>',\r",
							"  },\r",
							"  body: {\r",
							"    mode: 'formdata',\r",
							"    formdata: [\r",
							"        {key: \"auth_token\", value: pm.environment.get(\"token\")},\r",
							"        {key: \"curr_code\", value: pm.response.json()[i].Cur_ID}\r",
							"        ]\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.sendRequest(postRequest, (error, response) => {\r",
							"    if (response.code === 500) {return;\r",
							"    } else if (response.code === 200 && response.json().Cur_OfficialRate != undefined) {\r",
							"        console.log(response.json());\r",
							"}});\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}